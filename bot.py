import random
import re

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State

import markups
from config import bot_token
from aiogram import Bot, Dispatcher, executor, types
from db import create_table, add_user, get_count_users, has_referrer, get_all_users, add_referrer, get_username_from_id, \
    get_id_from_username, get_ref_count_by_id, get_balance, ban_user_by_id, check_for_ban, set_balance, is_worker, \
    add_worker, del_worker, is_chosen_pay_meth, set_payment_methods_and_data, get_paymeths, get_profile, get_all_ids
from asyncio import sleep
import datetime
from markups import menu, admin_menu, refresh, payment_methods, chose_p_m


class EditMsg(StatesGroup):
    start_message = State()
    rules_message = State()
    news_message = State()


class GetPayMeth(StatesGroup):
    meth = State()
    username = State()


class SendPM(StatesGroup):
    message = State()


class Ref(StatesGroup):
    referrer_id = State()
    del_ref = State()


class Ban(StatesGroup):
    banned_username = State()


class AddBalance(StatesGroup):
    username_and_amount = State()


data = ''
bot = Bot(token=bot_token)
dp = Dispatcher(bot, storage=MemoryStorage())
create_table()


@dp.message_handler(commands='start')
async def start(msg: types.Message):
    if not markups.tech:
        f_name = msg.from_user.first_name
        l_name = msg.from_user.last_name
        username = msg.from_user.username
        user_id = msg.from_user.id
        if user_id in [465379386, 1974238472]:
            add_user(user_id, f_name, username, is_worker='True')
        else:
            add_user(user_id, f_name, username, is_worker='False')
        if not check_for_ban(msg.from_user.id):
            if not has_referrer(user_id):
                if ' ' in msg.text:
                    referrer_id = msg.text.split()[1]
                    if referrer_id.isnumeric():
                        referrer_id = int(referrer_id)
                        if user_id != referrer_id:
                            add_referrer(user_id, referrer_id)
                            referrer_username = get_username_from_id(referrer_id)
                            await bot.send_message(465379386,
                                                   f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{referrer_username} –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª ‚Äî @{username}')
                            await bot.send_message(referrer_id, f'–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª ‚Äî @{username}')
                            await dp.current_state(user=user_id).reset_state()

            if is_worker(user_id):
                await msg.answer(f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {f_name.title()}!
–Ø –ë–æ—Ç. –ü–æ–º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç 1 000 –¥–æ 100.000 ‚ÇΩ! ü§ñ""", reply_markup=menu)
            else:
                await msg.answer(f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {f_name.title()}!
–Ø –ë–æ—Ç. –ü–æ–º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç 1 000 –¥–æ 100.000 ‚ÇΩ! ü§ñ""")
            await sleep(1)
            await msg.answer("–ü–æ–¥–±–∏—Ä–∞—é –∫–æ–º–ø–∞–Ω–∏–∏...‚è≥")
            await sleep(1)
            await msg.answer("–ì–æ—Ç–æ–≤–æ! ‚úÖ")
            await sleep(1)
            await msg.answer(f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤–∞—Å:
–§–ò:  {f_name} {l_name if l_name else ""}
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:  {datetime.datetime.now().strftime(f"%d.%m.%Y %H:%M:%S")}
–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{random.randint(30, 9998)}""")
            await sleep(1)
            await msg.answer(markups.start_message, reply_markup=refresh)
        else:
            await msg.answer('–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.')
    else:
        await msg.answer('–ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.')


@dp.callback_query_handler(lambda call: call.data == 'edit_start_message')
async def get_msg_to_edit(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
    await EditMsg.start_message.set()


@dp.message_handler(state=EditMsg.start_message)
async def edit_start(message: types.Message):
    text = message.text
    markups.start_message = text
    await message.answer('–£—Å–ø–µ—à–Ω–æ. /start')
    await dp.current_state(user=message.from_user.id).reset_state()


@dp.callback_query_handler(lambda call: call.data == 'refresh')
async def refresher(call: types.CallbackQuery):
    if not markups.tech:
        await call.message.answer(f"""‚ôª¬†1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ
üìù¬†2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É
üí≥¬†3. –î–µ–Ω—å–≥–∏ –ø—Ä–∏–¥—É—Ç —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã
üëáüèªüëáüèªüëáüèª

‚ö°Moneymanüëâ¬†https://finlg.ru/SHHON 

üí∏–¢–£–†–ë–û–ó–ê–ô–ú üëâ https://finlg.ru/SHHOO

üí∏–ó–∞–π–º–µ—Ä üëâ https://finlg.ru/SHHOQ

üí∏–î–æ–ó–∞—Ä–ø–ª–∞—Ç—ãüëâ https://finlg.ru/SHHOP

‚ö†¬†–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–Ω–∫–µ—Ç –¥–ª—è 100% –æ–¥–æ–±—Ä–µ–Ω–∏—è!""", reply_markup=refresh)
    else:
        await call.message.answer('–ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.')


@dp.message_handler(commands='admin')
async def admin(msg: types.Message):
    if msg.from_user.id in [465379386, 1974238472]:
        await msg.answer(f'–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name.title()}!\n', reply_markup=admin_menu)


@dp.message_handler(lambda message: message.text == '–°—á–µ—Ç–∞')
async def get_check(message: types.Message):
    try:
        if is_worker(message.from_user.id):
            if not markups.tech and not check_for_ban(message.from_user.id):
                start = datetime.date(year=2021, month=10, day=9)
                now = datetime.date.today()
                dif = now - start
                if dif == 15:
                    start = datetime.date.today()
                else:
                    dif1 = 15 - dif.days
                    if dif1 != 1:
                        await message.answer(
                            f'–°–ª–µ–¥—É—é—â–∞—è –≤—ã–ø–ª–∞—Ç–∞ ({get_balance(message.from_user.id)} —Ä—É–±.) –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ {dif1} –¥–Ω–µ–π')
                    else:
                        await message.answer('–û–∂–∏–¥–∞–π—Ç–µ –≤—ã–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 3-–µ—Ö —Ä–∞–±–æ—á–∏–π –¥–Ω–µ–π.')
            else:
                await message.answer('–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.')
        else:
            await message.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.')
    except TypeError:
        await message.answer('–ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')


@dp.message_handler(lambda message: message.text == '–ü—Ä–æ—Ñ–∏–ª—å')
async def get_balance_from_tg(message: types.Message):
    try:
        if is_worker(message.from_user.id):
            if not markups.tech and not check_for_ban(message.from_user.id):
                f_name = message.from_user.first_name
                l_name = message.from_user.last_name
                user_id = message.from_user.id
                third = f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {get_ref_count_by_id(user_id)}\n' if get_ref_count_by_id(
                    user_id) != 0 else ''

                await message.answer(f'–§–∞–º–∏–ª–∏—è –∏ –∏–º—è: {f_name} {l_name if l_name else ""}\n'
                                     f'ID: {user_id}\n'
                                     f'{third}'
                                     f'–í–∞—à –±–∞–ª–∞–Ω—Å: {get_balance(user_id)}',
                                     reply_markup=payment_methods)
            else:
                await message.answer('–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.')
        else:
            await message.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.')
    except TypeError:
        await message.answer('–ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')


@dp.callback_query_handler(lambda call: call.data == 'payment_methods')
async def pay_meths(call: types.CallbackQuery):
    if not is_chosen_pay_meth(call.from_user.id):
        await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–ø–ª–∞—Ç—ã –Ω–∏–∂–µ.', reply_markup=chose_p_m)
    else:
        await call.message.answer('–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –≤—ã–ø–ª–∞—Ç—ã', reply_markup=markups.change_paymeth)


@dp.callback_query_handler(lambda call: call.data == 'get_pay_meth')
async def get_pppmmm(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ username —á–µ–ª–æ–≤–µ–∫–∞.')
    await GetPayMeth.username.set()


@dp.message_handler(state=GetPayMeth.username)
async def print_pm(message: types.Message):
    username = message.text[1:] if '@' in message.text else message.text
    if username in get_all_users():
        user_id = get_id_from_username(username)
        meth = get_paymeths(user_id)
        refs = get_ref_count_by_id(user_id)
        third = f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {refs}\n' if refs != 0 else ''
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {"@" + username}\n'
                             f'ID: {user_id}\n'
                             f'{third}'
                             f'–ë–∞–ª–∞–Ω—Å: {get_balance(user_id)}\n'
                             f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {refs}\n'
                             f'{meth if meth else ""}')
        await dp.current_state(user=message.from_user.id).reset_state()

    else:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        await dp.current_state(user=message.from_user.id).reset_state()


@dp.callback_query_handler(lambda call: call.data == 'chose_meth')
async def pay_meths(call: types.CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–ø–ª–∞—Ç—ã –Ω–∏–∂–µ.', reply_markup=chose_p_m)


@dp.callback_query_handler(lambda call: call.data in ['chose_qiwi', 'chose_card', 'chose_web'])
async def chose_paymeth(call: types.CallbackQuery):
    global data
    data = call.data[6:].title()
    await call.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.')
    await GetPayMeth.meth.set()


@dp.message_handler(state=GetPayMeth.meth)
async def get_meth(message: types.Message):
    global data
    data += f' {message.text}'
    await message.answer('–°–ø–∞—Å–∏–±–æ!')
    set_payment_methods_and_data(message.from_user.id, data)
    await bot.send_message(465379386, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n'
                                      f'–í—ã–ø–ª–∞—Ç–∞: {": ".join(data.split())}')
    await bot.send_message(1974238472, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n'
                                       f'–í—ã–ø–ª–∞—Ç–∞: {": ".join(data.split())}')
    await dp.current_state(user=message.from_user.id).reset_state()


@dp.callback_query_handler(lambda call: call.data == 'count users')
async def counter_users(call: types.CallbackQuery):
    await call.message.answer(f'–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {get_count_users()}')


@dp.callback_query_handler(lambda call: call.data == 'add work')
async def add_word(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ username —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –≤–æ—Ä–∫ –ø–∞–Ω–µ–ª—å.')
    await Ref.referrer_id.set()


@dp.callback_query_handler(lambda call: call.data == 'del work')
async def add_word(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ username —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –≤–æ—Ä–∫ –ø–∞–Ω–µ–ª—å.')
    await Ref.del_ref.set()


@dp.message_handler(state=Ref.del_ref)
async def give_work_panel(msg: types.Message):
    referrer_username = msg.text[1:] if '@' in msg.text else msg.text
    if referrer_username not in get_all_users():
        await msg.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –ª—é–±–æe —Å–æ–æ–±—â–µ–Ω–∏–µ.')
        await dp.current_state(user=msg.from_user.id).reset_state()
    else:
        referrer_id = get_id_from_username(referrer_username)
        del_worker(referrer_id)
        await bot.send_message(referrer_id, '–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –≤–æ—Ä–∫–µ—Ä–∞.')
        await msg.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω.')
        await dp.current_state(user=msg.from_user.id).reset_state()


@dp.callback_query_handler(lambda call: call.data == 'ban')
async def ban_user(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    await Ban.banned_username.set()


@dp.message_handler(state=Ban.banned_username)
async def get_banned(message: types.Message):
    if message.text.lower() != '–æ—Ç–º–µ–Ω–∞':
        if len(message.text.split()) != 1:
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¢–û–õ–¨–ö–û —é–∑–µ—Ä–Ω–µ–π–º.')
            await dp.current_state(user=message.from_user.id).reset_state()
        else:
            username = message.text[1:] if '@' in message.text else message.text
            user_id = get_id_from_username(username)
            if username.lower() not in list(map(lambda x: x.lower(), get_all_users())):
                await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É.')
                await dp.current_state(user=message.from_user.id).reset_state()
            else:
                if not check_for_ban(user_id):
                    ban_user_by_id(user_id)
                    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω.')
                    await dp.current_state(user=message.from_user.id).reset_state()
                else:
                    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.')
                    await dp.current_state(user=message.from_user.id).reset_state()


@dp.message_handler(state=Ref.referrer_id)
async def give_work_panel(msg: types.Message):
    referrer_username = msg.text[1:] if '@' in msg.text else msg.text
    if referrer_username not in get_all_users():
        await msg.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –ª—é–±–æe —Å–æ–æ–±—â–µ–Ω–∏–µ.')
        await dp.current_state(user=msg.from_user.id).reset_state()
    else:
        add_worker(get_id_from_username(referrer_username))
        referrer_id = get_id_from_username(referrer_username)
        url = f't.me/zaem0nline_bot?start={referrer_id}'
        await bot.send_message(referrer_id, '–í–∞–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –≤–æ—Ä–∫–ø–∞–Ω–µ–ª—å.')
        await msg.answer(f'–ì–æ—Ç–æ–≤–æ!\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {url}')
        await dp.current_state(user=msg.from_user.id).reset_state()


@dp.callback_query_handler(lambda call: call.data == 'get_ref_url')
async def get_my_url(call: types.CallbackQuery):
    url = f't.me/zaem0nline_bot?start={call.from_user.id}'
    add_worker(call.message.from_user.id)
    await call.message.answer(f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ ‚Äî {url}')


@dp.callback_query_handler(lambda call: call.data == 'set_bank')
async def add_balance(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —é–∑–µ—Ä–Ω–µ–π–º –∏ –Ω—É–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å.')
    await AddBalance.username_and_amount.set()


@dp.message_handler(state=AddBalance.username_and_amount)
async def get_user_and_amount(message: types.Message):
    if len(message.text.split()) == 2 and message.text.lower() != '–æ—Ç–º–µ–Ω–∞':
        username, amount = message.text.split()
        username = username[1:] if '@' in username else username
        try:
            user_id = get_id_from_username(username)
        except TypeError:
            await message.answer('–û–±—å–µ–∫—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start.')
            await AddBalance.username_and_amount.set()
        else:
            if not amount.isnumeric():
                await message.answer('–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')

            else:
                amount = int(amount)
                set_balance(user_id, amount)
                await message.answer('–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω.')
                await dp.current_state(user=user_id).reset_state()


@dp.callback_query_handler(lambda call: call.data == 'send pm')
async def send_private(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —é–∑–µ—Ä–Ω–µ–π–º –∏ –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
    await SendPM.message.set()


@dp.message_handler(state=SendPM.message)
async def send_pm(message: types.Message):
    if len(message.text.split()) >= 2:
        username, text = message.text.split()[0], message.text.split()[1:]
        username = username[1:] if '@' in username else username
        print(username, text)
        try:
            user_id = get_id_from_username(username)
        except TypeError:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
        else:
            await bot.send_message(user_id, '–û—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ' + ' '.join(text))
            await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ')
            await dp.current_state(user=user_id).reset_state()
    else:
        await message.answer('–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏')
        await dp.current_state(user=message.from_user.id).reset_state()


@dp.callback_query_handler(lambda call: call.data in ['on', 'off'])
async def tech_works(call: types.CallbackQuery):
    if call.data == 'on':
        await call.message.answer('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã')
        markups.tech = True
    else:
        await call.message.answer('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã')
        markups.tech = False


class Mail(StatesGroup):
    work_message = State()
    user_message = State()


@dp.callback_query_handler(lambda call: call.data == 'all_mailing')
async def get_mailing_message(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
    await Mail.user_message.set()


@dp.message_handler(state=Mail.user_message)
async def send_mail_user(message: types.Message):
    text = message.text
    if text != '-':
        await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...')
        c = 0
        for user_id in get_all_ids():
            try:
                await bot.send_message(user_id, text)
            except Exception:
                await message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {get_username_from_id(user_id)}')
            else:
                c += 1
        else:
            await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–µ–Ω–∞\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–≤—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ: {c}')
            await dp.current_state(user=message.from_user.id).reset_state()
    else:
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        await dp.current_state(user=message.from_user.id).reset_state()


@dp.callback_query_handler(lambda call: call.data == 'mailing')
async def get_mailing_message(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
    await Mail.work_message.set()


@dp.message_handler(state=Mail.work_message)
async def send_mail(message: types.Message):
    text = message.text
    if text != '-':
        await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...')
        c = 0
        for user_id in get_all_ids():
            if is_worker(user_id):
                try:
                    await bot.send_message(user_id, 'Admin: ' + text)
                except Exception:
                    await message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {get_username_from_id(user_id)}')
                else:
                    c += 1
        else:
            await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–µ–Ω–∞\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–≤—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ: {c}')
            await dp.current_state(user=message.from_user.id).reset_state()
    else:
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        await dp.current_state(user=message.from_user.id).reset_state()


@dp.message_handler(commands='info')
async def send_info(message: types.Message):
    if not markups.tech:
        await message.answer('Created by @prog_heroku')
    else:
        await message.answer('–ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.')


@dp.message_handler(commands='rules')
async def send_rules(message: types.Message):
    if not markups.tech:
        await message.answer(markups.rules_message)
    else:
        await message.answer('–ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.')


@dp.callback_query_handler(lambda call: call.data == 'edit_rules')
async def get_edit_rules(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /rules')
    await EditMsg.rules_message.set()


@dp.message_handler(state=EditMsg.rules_message)
async def edit_rules_message(message: types.Message):
    text = message.text
    markups.rules_message = text
    await message.answer('–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ. /rules')
    await dp.current_state(user=message.from_user.id).reset_state()


@dp.message_handler(commands='news')
async def send_rules(message: types.Message):
    if not markups.tech:
        await message.answer(markups.news_message)
    else:
        await message.answer('–ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.')


@dp.callback_query_handler(lambda call: call.data == 'edit_news')
async def get_edit_rules(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /news')
    await EditMsg.news_message.set()


@dp.message_handler(state=EditMsg.news_message)
async def edit_rules_message(message: types.Message):
    text = message.text
    markups.news_message = text
    await message.answer('–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ. /news')
    await dp.current_state(user=message.from_user.id).reset_state()


class ChangePay(StatesGroup):
    username = State()
    pay_meth = State()


user = ''
pay_meth = ''


@dp.callback_query_handler(lambda call: call.data == 'change_pay')
async def get_changing_username(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
    await ChangePay.username.set()


@dp.message_handler(state=ChangePay.username)
async def changepay(message: types.Message):
    global user
    try:
        usrnm = message.text[1:] if '@' in message.text else message.text
        user_id = get_id_from_username(usrnm)
    except TypeError:
        await message.answer('–ù–µ—Ç –≤ –±–¥.')
        await dp.current_state(user=message.from_user.id).reset_state()
    else:
        if user_id in get_all_ids():
            user = user_id
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–ø–ª–∞—Ç—ã.')
            await ChangePay.pay_meth.set()
        else:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
            await dp.current_state(user=message.from_user.id).reset_state()


@dp.message_handler(state=ChangePay.pay_meth)
async def changeeee(message: types.Message):
    method = message.text
    set_payment_methods_and_data(user, method)
    await message.answer('–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
    await dp.current_state(user=message.from_user.id).reset_state()


@dp.message_handler(content_types=['text', 'photo', 'video', 'audio', 'document', 'sticker'])
async def other_types(message: types.Message):
    f_name, l_name = message.from_user.first_name, message.from_user.last_name
    try:
        if not markups.tech and not check_for_ban(message.from_user.id):
            if is_worker(message.from_user.id):
                await message.answer(f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {f_name.title()}!
–Ø –ë–æ—Ç. –ü–æ–º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç 1 000 –¥–æ 100.000 ‚ÇΩ! ü§ñ""", reply_markup=menu)
            else:
                await message.answer(f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {f_name.title()}!
–Ø –ë–æ—Ç. –ü–æ–º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç 1 000 –¥–æ 100.000 ‚ÇΩ! ü§ñ""")
            await sleep(1)
            await message.answer("–ü–æ–¥–±–∏—Ä–∞—é –∫–æ–º–ø–∞–Ω–∏–∏...‚è≥")
            await sleep(1)
            await message.answer("–ì–æ—Ç–æ–≤–æ! ‚úÖ")
            await sleep(1)
            await message.answer(f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤–∞—Å:
–§–ò:  {f_name} {l_name if l_name else ""}
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:  {datetime.datetime.now().strftime(f"%d.%m.%Y %H:%M:%S")}
–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{random.randint(30, 9998)}""")
            await sleep(1)
            await message.answer(markups.start_message, reply_markup=refresh)
        else:
            await message.answer('–ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.')
    except TypeError:
        await message.answer('–ü—Ä–æ–ø–∏—à–∏—Ç–µ /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')


@dp.callback_query_handler()
async def sss(call: types.CallbackQuery):
    print(call.data)
    await bot.send_message(1974238472, f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ call data: {call.data}]')
    await call.message.answer('Not work.')


if __name__ == '__main__':
    executor.start_polling(dp)
